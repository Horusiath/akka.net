// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: StreamRefMessages.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Akka.Streams.Serialization.Proto.Msg {

  /// <summary>Holder for reflection information generated from StreamRefMessages.proto</summary>
  internal static partial class StreamRefMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for StreamRefMessages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static StreamRefMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdTdHJlYW1SZWZNZXNzYWdlcy5wcm90bxIkQWtrYS5TdHJlYW1zLlNlcmlh",
            "bGl6YXRpb24uUHJvdG8uTXNnIkwKB1NpbmtSZWYSQQoJdGFyZ2V0UmVmGAEg",
            "ASgLMi4uQWtrYS5TdHJlYW1zLlNlcmlhbGl6YXRpb24uUHJvdG8uTXNnLkFj",
            "dG9yUmVmIk4KCVNvdXJjZVJlZhJBCglvcmlnaW5SZWYYASABKAsyLi5Ba2th",
            "LlN0cmVhbXMuU2VyaWFsaXphdGlvbi5Qcm90by5Nc2cuQWN0b3JSZWYiGAoI",
            "QWN0b3JSZWYSDAoEcGF0aBgBIAEoCSJRCgdQYXlsb2FkEhcKD2VuY2xvc2Vk",
            "TWVzc2FnZRgBIAEoDBIUCgxzZXJpYWxpemVySWQYAiABKAUSFwoPbWVzc2Fn",
            "ZU1hbmlmZXN0GAMgASgMIlkKFE9uU3Vic2NyaWJlSGFuZHNoYWtlEkEKCXRh",
            "cmdldFJlZhgBIAEoCzIuLkFra2EuU3RyZWFtcy5TZXJpYWxpemF0aW9uLlBy",
            "b3RvLk1zZy5BY3RvclJlZiIhChBDdW11bGF0aXZlRGVtYW5kEg0KBXNlcU5y",
            "GAEgASgDImAKD1NlcXVlbmNlZE9uTmV4dBINCgVzZXFOchgBIAEoAxI+Cgdw",
            "YXlsb2FkGAIgASgLMi0uQWtrYS5TdHJlYW1zLlNlcmlhbGl6YXRpb24uUHJv",
            "dG8uTXNnLlBheWxvYWQiJAoTUmVtb3RlU3RyZWFtRmFpbHVyZRINCgVjYXVz",
            "ZRgBIAEoDCImChVSZW1vdGVTdHJlYW1Db21wbGV0ZWQSDQoFc2VxTnIYASAB",
            "KANCAkgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.SinkRef), global::Akka.Streams.Serialization.Proto.Msg.SinkRef.Parser, new[]{ "TargetRef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.SourceRef), global::Akka.Streams.Serialization.Proto.Msg.SourceRef.Parser, new[]{ "OriginRef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.ActorRef), global::Akka.Streams.Serialization.Proto.Msg.ActorRef.Parser, new[]{ "Path" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.Payload), global::Akka.Streams.Serialization.Proto.Msg.Payload.Parser, new[]{ "EnclosedMessage", "SerializerId", "MessageManifest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.OnSubscribeHandshake), global::Akka.Streams.Serialization.Proto.Msg.OnSubscribeHandshake.Parser, new[]{ "TargetRef" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.CumulativeDemand), global::Akka.Streams.Serialization.Proto.Msg.CumulativeDemand.Parser, new[]{ "SeqNr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.SequencedOnNext), global::Akka.Streams.Serialization.Proto.Msg.SequencedOnNext.Parser, new[]{ "SeqNr", "Payload" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.RemoteStreamFailure), global::Akka.Streams.Serialization.Proto.Msg.RemoteStreamFailure.Parser, new[]{ "Cause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Akka.Streams.Serialization.Proto.Msg.RemoteStreamCompleted), global::Akka.Streams.Serialization.Proto.Msg.RemoteStreamCompleted.Parser, new[]{ "SeqNr" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class SinkRef : pb::IMessage<SinkRef> {
    private static readonly pb::MessageParser<SinkRef> _parser = new pb::MessageParser<SinkRef>(() => new SinkRef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SinkRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkRef(SinkRef other) : this() {
      TargetRef = other.targetRef_ != null ? other.TargetRef.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SinkRef Clone() {
      return new SinkRef(this);
    }

    /// <summary>Field number for the "targetRef" field.</summary>
    public const int TargetRefFieldNumber = 1;
    private global::Akka.Streams.Serialization.Proto.Msg.ActorRef targetRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Streams.Serialization.Proto.Msg.ActorRef TargetRef {
      get { return targetRef_; }
      set {
        targetRef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SinkRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SinkRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetRef, other.TargetRef)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetRef_ != null) hash ^= TargetRef.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetRef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TargetRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetRef);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SinkRef other) {
      if (other == null) {
        return;
      }
      if (other.targetRef_ != null) {
        if (targetRef_ == null) {
          targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();
        }
        TargetRef.MergeFrom(other.TargetRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (targetRef_ == null) {
              targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();
            }
            input.ReadMessage(targetRef_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SourceRef : pb::IMessage<SourceRef> {
    private static readonly pb::MessageParser<SourceRef> _parser = new pb::MessageParser<SourceRef>(() => new SourceRef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SourceRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceRef(SourceRef other) : this() {
      OriginRef = other.originRef_ != null ? other.OriginRef.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SourceRef Clone() {
      return new SourceRef(this);
    }

    /// <summary>Field number for the "originRef" field.</summary>
    public const int OriginRefFieldNumber = 1;
    private global::Akka.Streams.Serialization.Proto.Msg.ActorRef originRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Streams.Serialization.Proto.Msg.ActorRef OriginRef {
      get { return originRef_; }
      set {
        originRef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SourceRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SourceRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(OriginRef, other.OriginRef)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (originRef_ != null) hash ^= OriginRef.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (originRef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(OriginRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (originRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OriginRef);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SourceRef other) {
      if (other == null) {
        return;
      }
      if (other.originRef_ != null) {
        if (originRef_ == null) {
          originRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();
        }
        OriginRef.MergeFrom(other.OriginRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (originRef_ == null) {
              originRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();
            }
            input.ReadMessage(originRef_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class ActorRef : pb::IMessage<ActorRef> {
    private static readonly pb::MessageParser<ActorRef> _parser = new pb::MessageParser<ActorRef>(() => new ActorRef());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ActorRef> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRef() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRef(ActorRef other) : this() {
      path_ = other.path_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ActorRef Clone() {
      return new ActorRef(this);
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 1;
    private string path_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ActorRef);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ActorRef other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Path != other.Path) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Path.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Path);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ActorRef other) {
      if (other == null) {
        return;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Path = input.ReadString();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class Payload : pb::IMessage<Payload> {
    private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload(Payload other) : this() {
      enclosedMessage_ = other.enclosedMessage_;
      serializerId_ = other.serializerId_;
      messageManifest_ = other.messageManifest_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload Clone() {
      return new Payload(this);
    }

    /// <summary>Field number for the "enclosedMessage" field.</summary>
    public const int EnclosedMessageFieldNumber = 1;
    private pb::ByteString enclosedMessage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EnclosedMessage {
      get { return enclosedMessage_; }
      set {
        enclosedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serializerId" field.</summary>
    public const int SerializerIdFieldNumber = 2;
    private int serializerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SerializerId {
      get { return serializerId_; }
      set {
        serializerId_ = value;
      }
    }

    /// <summary>Field number for the "messageManifest" field.</summary>
    public const int MessageManifestFieldNumber = 3;
    private pb::ByteString messageManifest_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MessageManifest {
      get { return messageManifest_; }
      set {
        messageManifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnclosedMessage != other.EnclosedMessage) return false;
      if (SerializerId != other.SerializerId) return false;
      if (MessageManifest != other.MessageManifest) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnclosedMessage.Length != 0) hash ^= EnclosedMessage.GetHashCode();
      if (SerializerId != 0) hash ^= SerializerId.GetHashCode();
      if (MessageManifest.Length != 0) hash ^= MessageManifest.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnclosedMessage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EnclosedMessage);
      }
      if (SerializerId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MessageManifest);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnclosedMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EnclosedMessage);
      }
      if (SerializerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SerializerId);
      }
      if (MessageManifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MessageManifest);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload other) {
      if (other == null) {
        return;
      }
      if (other.EnclosedMessage.Length != 0) {
        EnclosedMessage = other.EnclosedMessage;
      }
      if (other.SerializerId != 0) {
        SerializerId = other.SerializerId;
      }
      if (other.MessageManifest.Length != 0) {
        MessageManifest = other.MessageManifest;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EnclosedMessage = input.ReadBytes();
            break;
          }
          case 16: {
            SerializerId = input.ReadInt32();
            break;
          }
          case 26: {
            MessageManifest = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class OnSubscribeHandshake : pb::IMessage<OnSubscribeHandshake> {
    private static readonly pb::MessageParser<OnSubscribeHandshake> _parser = new pb::MessageParser<OnSubscribeHandshake>(() => new OnSubscribeHandshake());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OnSubscribeHandshake> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnSubscribeHandshake() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnSubscribeHandshake(OnSubscribeHandshake other) : this() {
      TargetRef = other.targetRef_ != null ? other.TargetRef.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OnSubscribeHandshake Clone() {
      return new OnSubscribeHandshake(this);
    }

    /// <summary>Field number for the "targetRef" field.</summary>
    public const int TargetRefFieldNumber = 1;
    private global::Akka.Streams.Serialization.Proto.Msg.ActorRef targetRef_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Streams.Serialization.Proto.Msg.ActorRef TargetRef {
      get { return targetRef_; }
      set {
        targetRef_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OnSubscribeHandshake);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OnSubscribeHandshake other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TargetRef, other.TargetRef)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (targetRef_ != null) hash ^= TargetRef.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (targetRef_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TargetRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (targetRef_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetRef);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OnSubscribeHandshake other) {
      if (other == null) {
        return;
      }
      if (other.targetRef_ != null) {
        if (targetRef_ == null) {
          targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();
        }
        TargetRef.MergeFrom(other.TargetRef);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (targetRef_ == null) {
              targetRef_ = new global::Akka.Streams.Serialization.Proto.Msg.ActorRef();
            }
            input.ReadMessage(targetRef_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class CumulativeDemand : pb::IMessage<CumulativeDemand> {
    private static readonly pb::MessageParser<CumulativeDemand> _parser = new pb::MessageParser<CumulativeDemand>(() => new CumulativeDemand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CumulativeDemand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CumulativeDemand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CumulativeDemand(CumulativeDemand other) : this() {
      seqNr_ = other.seqNr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CumulativeDemand Clone() {
      return new CumulativeDemand(this);
    }

    /// <summary>Field number for the "seqNr" field.</summary>
    public const int SeqNrFieldNumber = 1;
    private long seqNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeqNr {
      get { return seqNr_; }
      set {
        seqNr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CumulativeDemand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CumulativeDemand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNr != other.SeqNr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNr != 0L) hash ^= SeqNr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqNr != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SeqNr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeqNr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CumulativeDemand other) {
      if (other == null) {
        return;
      }
      if (other.SeqNr != 0L) {
        SeqNr = other.SeqNr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeqNr = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class SequencedOnNext : pb::IMessage<SequencedOnNext> {
    private static readonly pb::MessageParser<SequencedOnNext> _parser = new pb::MessageParser<SequencedOnNext>(() => new SequencedOnNext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SequencedOnNext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequencedOnNext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequencedOnNext(SequencedOnNext other) : this() {
      seqNr_ = other.seqNr_;
      Payload = other.payload_ != null ? other.Payload.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SequencedOnNext Clone() {
      return new SequencedOnNext(this);
    }

    /// <summary>Field number for the "seqNr" field.</summary>
    public const int SeqNrFieldNumber = 1;
    private long seqNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeqNr {
      get { return seqNr_; }
      set {
        seqNr_ = value;
      }
    }

    /// <summary>Field number for the "payload" field.</summary>
    public const int PayloadFieldNumber = 2;
    private global::Akka.Streams.Serialization.Proto.Msg.Payload payload_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Akka.Streams.Serialization.Proto.Msg.Payload Payload {
      get { return payload_; }
      set {
        payload_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SequencedOnNext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SequencedOnNext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNr != other.SeqNr) return false;
      if (!object.Equals(Payload, other.Payload)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNr != 0L) hash ^= SeqNr.GetHashCode();
      if (payload_ != null) hash ^= Payload.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqNr != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SeqNr);
      }
      if (payload_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeqNr);
      }
      if (payload_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Payload);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SequencedOnNext other) {
      if (other == null) {
        return;
      }
      if (other.SeqNr != 0L) {
        SeqNr = other.SeqNr;
      }
      if (other.payload_ != null) {
        if (payload_ == null) {
          payload_ = new global::Akka.Streams.Serialization.Proto.Msg.Payload();
        }
        Payload.MergeFrom(other.Payload);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeqNr = input.ReadInt64();
            break;
          }
          case 18: {
            if (payload_ == null) {
              payload_ = new global::Akka.Streams.Serialization.Proto.Msg.Payload();
            }
            input.ReadMessage(payload_);
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoteStreamFailure : pb::IMessage<RemoteStreamFailure> {
    private static readonly pb::MessageParser<RemoteStreamFailure> _parser = new pb::MessageParser<RemoteStreamFailure>(() => new RemoteStreamFailure());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteStreamFailure> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamFailure() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamFailure(RemoteStreamFailure other) : this() {
      cause_ = other.cause_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamFailure Clone() {
      return new RemoteStreamFailure(this);
    }

    /// <summary>Field number for the "cause" field.</summary>
    public const int CauseFieldNumber = 1;
    private pb::ByteString cause_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Cause {
      get { return cause_; }
      set {
        cause_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteStreamFailure);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteStreamFailure other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cause != other.Cause) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cause.Length != 0) hash ^= Cause.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cause.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Cause);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cause.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Cause);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteStreamFailure other) {
      if (other == null) {
        return;
      }
      if (other.Cause.Length != 0) {
        Cause = other.Cause;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Cause = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  internal sealed partial class RemoteStreamCompleted : pb::IMessage<RemoteStreamCompleted> {
    private static readonly pb::MessageParser<RemoteStreamCompleted> _parser = new pb::MessageParser<RemoteStreamCompleted>(() => new RemoteStreamCompleted());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoteStreamCompleted> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Akka.Streams.Serialization.Proto.Msg.StreamRefMessagesReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamCompleted() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamCompleted(RemoteStreamCompleted other) : this() {
      seqNr_ = other.seqNr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoteStreamCompleted Clone() {
      return new RemoteStreamCompleted(this);
    }

    /// <summary>Field number for the "seqNr" field.</summary>
    public const int SeqNrFieldNumber = 1;
    private long seqNr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SeqNr {
      get { return seqNr_; }
      set {
        seqNr_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoteStreamCompleted);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoteStreamCompleted other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SeqNr != other.SeqNr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SeqNr != 0L) hash ^= SeqNr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SeqNr != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SeqNr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SeqNr != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SeqNr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoteStreamCompleted other) {
      if (other == null) {
        return;
      }
      if (other.SeqNr != 0L) {
        SeqNr = other.SeqNr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SeqNr = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
